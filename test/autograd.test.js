'use strict'

const assert = require('assert')
const { Var, Const, Neg, Exp, Ln, Sin, Cos, Tan } = require('../src/autograd')

function assertFloatEqual(actual, expected) {
  assert.equal(Math.abs(actual - expected) < 1e-8, true)
}

describe('test of eval and diff calculation', () => {
  it('case 1', () => {
    let x = Var()
    let y = Const(-3).mul(x)
    y.eval([x], [3])
    assert.equal(y.value, -9)
    assert.equal(x.grad, -3)
  })
  it('case 2', () => {
    let x = Var()
    let y = Var(155)
    y.eval([x], [3])
    assert.equal(x.value, 3)
    assert.equal(y.value, 155)
    assert.equal(x.grad, 0)
    assert.equal(y.grad, 1)
  })
  it('case 3', () => {
    let x = Var()
    let y = Var()
    let z = Var()
    let r = x.mul(y).add(z).add(x.add(y).mul(z))
    r.eval([x, y, z], [5, 4, 7])
    assert.equal(r.value, 90)
    assert.equal(x.grad, 11)
    assert.equal(y.grad, 12)
    assert.equal(z.grad, 10)
  })
  it('case 4', () => {
    let x = Var()
    let y = Var()
    let u = x.mul(y)
    let v = u.mul(u)
    let r = v.add(v)
    r.eval([x, y], [23, 77])
    assert.equal(r.value, 6272882)
    assert.equal(x.grad, 545468)
    assert.equal(y.grad, 162932)
  })
  it('case 5', () => {
    let x = Var()
    let y = Var()
    let z = Var()
    let w = Var()
    let r = x.mul(y).add(Const(3).mul(z)).add(Const(6).mul(w))
      .mul(Const(12).add(y.mul(z)).add(Const(6).mul(w)))
      .add(Const(10).mul(x).mul(y.add(z)).mul(w.add(Const(3))))
    r.eval([x, y, z, w], [2, -3, 11, 7])
    assert.equal(r.value, 3049)
    assert.equal(x.grad, 737)
    assert.equal(y.grad, 1001)
    assert.equal(z.grad, 56)
    assert.equal(w.grad, 700)
  })
  it('case 6', () => {
    let x = Var()
    let y = Var()
    let u = x.add(y)
    let v = x.mul(y)
    let r = Const(2).mul(u).mul(v).mul(v).add(Const(3).mul(u).mul(u).mul(v)).add(Const(4))
    r.eval([x, y], [12, 13])
    assert.equal(u.value, 25)
    assert.equal(v.value, 156)
    assert.equal(r.value, 1509304)
    assert.equal(u.grad, 72072)
    assert.equal(v.grad, 17475)
    assert.equal(x.grad, 299247)
    assert.equal(y.grad, 281772)
  })
  it('case 7', () => {
    let x = Var()
    let y = Var()
    let u = x.add(y)
    let v = x.mul(y)
    let a = Const(3).mul(u).add(Const(2).mul(v))
    let b = Const(7).mul(u).mul(v)
    let r = x.add(y).add(u).add(v).add(a).add(b).add(x.mul(y).mul(u).mul(v).mul(a).mul(b))
    r.eval([x, y], [-3, 2])
    assert.equal(r.value, 22699)
    assert.equal(x.grad, -78669)
    assert.equal(y.grad, -6829)
  })
  it('case 8', () => {
    let x = Var()
    let y = Var()
    let z = Var()
    let u = x.add(y).add(z)
    let v = x.mul(y).add(y.mul(z)).add(x.mul(z))
    let w = x.mul(y).mul(z).add(Const(-7))
    let r = Const(2).mul(x)
      .add(Const(7).mul(u.mul(v).add(w)))
      .sub(Const(16).mul(v.add(w)))
      .add(w.mul(u))
      .sub(Const(1).mul(u).mul(v).mul(w))
      .add(Const(3).mul(y))
      .add(Const(4).mul(z))
    r.eval([x, y, z], [2, 7, -11])
    assert.equal(r.value, 31672)
    assert.equal(x.grad, 906)
    assert.equal(y.grad, -7288)
    assert.equal(z.grad, -20139)
  })
  it('case 9', () => {
    let x = Var()
    let y = Const(1).div(x)
    y.eval([x], [3])
    assert.equal(y.value, 1 / 3)
    assert.equal(x.grad, -1 / 9)
  })
  it('case 10', () => {
    let x = Var()
    let y = Var()
    let r = x.div(y)
    r.eval([x, y], [37, 12])
    assert.equal(r.value, 37 / 12)
    assert.equal(x.grad, 1 / 12)
    assert.equal(y.grad, -37 / (12 * 12))
  })
  it('case 11', () => {
    let x = Var()
    let y = Var()
    let r = x.add(y).div(x.sub(y))
    r.eval([x, y], [3, -4])
    assert.equal(r.value, -1 / 7)
    assert.equal(x.grad, 8 / 49)
    assert.equal(y.grad, 6 / 49)
  })
  it('case 12', () => {
    let x = Var()
    let y = Var()
    let r = x.add(y).div(x.sub(y))
    r.eval([x, y], [3, -4])
    assert.equal(r.value, -1 / 7)
    assert.equal(x.grad, 8 / 49)
    assert.equal(y.grad, 6 / 49)
  })
  it('case 13', () => {
    let x = Var()
    let y = Var()
    let r = Const(1).div(Const(1).add(x.mul(y)))
      .sub(x.mul(x).add(y.mul(y)).div(Const(2).mul(x).mul(y)))
    r.eval([x, y], [3, -4])
    assert.equal(r.value, 251 / 264)
    assertFloatEqual(x.grad, -559 / 8712)
    assertFloatEqual(y.grad, -1135 / 11616)
  })
  it('case 14', () => {
    let x = Var()
    let y = Var()
    let z = Var()
    let r = x.div(y).div(z)
    r.eval([x, y, z], [3, -4, 2])
    assert.equal(r.value, -3 / 8)
    assert.equal(x.grad, -1 / 8)
    assert.equal(y.grad, -3 / 32)
    assert.equal(z.grad, 3 / 16)
  })
  it('case 15', () => {
    let x = Var()
    let y = Var()
    let z = Var()
    let r = x.div(y.div(z))
    r.eval([x, y, z], [3, -4, 2])
    assert.equal(r.value, -3 / 2)
    assert.equal(x.grad, -1 / 2)
    assert.equal(y.grad, -3 / 8)
    assert.equal(z.grad, -3 / 4)
  })
  it('case 16', () => {
    let x = Var()
    let y = Var()
    let r = x.div(y).mul(y)
    r.eval([x, y], [3, 2])
    assert.equal(r.value, 3)
    assert.equal(x.grad, 1)
    assert.equal(y.grad, 0)
  })
  it('case 17', () => {
    let x = Var()
    let y = Var()
    let r = x.mul(y).div(y)
    r.eval([x, y], [3, 2])
    assert.equal(r.value, 3)
    assert.equal(x.grad, 1)
    assert.equal(y.grad, 0)
  })
  it('case 18', () => {
    let x = Var()
    let y = Var()
    let u = x.div(y)
    let v = y.div(x)
    let r = Const(1).div(x)
      .sub(Const(2).mul(u).add(Const(3).mul(v))
        .div(Const(5).mul(u).sub(Const(7).mul(v)).add(Const(2))))
      .add(Const(1).div(y))
    r.eval([x, y], [7, 3])
    assertFloatEqual(r.value, -55 / 672)
    assertFloatEqual(x.grad, 551 / 12544)
    assertFloatEqual(y.grad, -4213 / 16128)
  })
  it('case 19', () => {
    let x = Var()
    let y = x.pow(Const(4))
    y.eval([x], [3])
    assert.equal(y.value, 81)
    assert.equal(x.grad, 108)
  })
  it('case 20', () => {
    let x = Var()
    let y = Const(4).pow(x)
    y.eval([x], [3])
    assert.equal(y.value, 64)
    assert.equal(x.grad, 64 * Math.log(4))
  })
  it('case 21', () => {
    let x = Var()
    let y = Var()
    let r = x.pow(y)
    r.eval([x, y], [5, 3])
    assert.equal(r.value, 125)
    assert.equal(x.grad, 75)
    assert.equal(y.grad, 125 * Math.log(5))
  })
  it('case 22', () => {
    let x = Var()
    let y = Var()
    let r = x.add(y).pow(Const(2).mul(x).sub(Const(3).mul(y)))
    r.eval([x, y], [2, 3])
    assertFloatEqual(r.value, 1 / 3125)
    assertFloatEqual(x.grad, (Math.log(25) - 1) / 3125)
    assertFloatEqual(y.grad, (-3 * Math.log(5) - 1) / 3125)
  })
  it('case 23', () => {
    let x = Var()
    let y = x.pow(Const(3))
      .sub(Const(4).pow(x))
      .add(x.add(Const(7)).mul(x.add(Const(1))).div(Const(2).mul(x).sub(Const(3))))
    y.eval([x], [3])
    assertFloatEqual(y.value, -71 / 3)
    assertFloatEqual(x.grad, 205 / 9 - 64 * Math.log(4))
  })
  it('case 24', () => {
    let x = Var()
    let y = Var()
    let z = Var()
    let r = x.pow(y).pow(z)
    r.eval([x, y, z], [4, 3, 2])
    assert.equal(r.value, 4096)
    assert.equal(x.grad, 6144)
    assert.equal(y.grad, 8192 * Math.log(4))
    assert.equal(z.grad, 4096 * Math.log(64))
  })
  it('case 25', () => {
    let x = Var()
    let y = Var()
    let z = Var()
    let r = x.pow(y.pow(z))
    r.eval([x, y, z], [4, 3, 2])
    assert.equal(r.value, 262144)
    assert.equal(x.grad, 589824)
    assert.equal(y.grad, 1572864 * Math.log(4))
    assert.equal(z.grad, 2359296 * Math.log(3) * Math.log(4))
  })
  it('case 26', () => {
    let x = Var()
    let y = Neg(x).add(Const(3))
    y.eval([x], [13])
    assert.equal(y.value, -10)
    assert.equal(x.grad, -1)
  })
  it('case 27', () => {
    let x = Var()
    let u = x
    let v = Neg(x)
    let r = u.add(v)
    r.eval([x], [5])
    assert.equal(r.value, 0)
    assert.equal(x.grad, 0)
  })
  it('case 28', () => {
    let x = Var()
    let y = Exp(x)
    y.eval([x], [3])
    assert.equal(y.value, Math.exp(3))
    assert.equal(x.grad, Math.exp(3))
  })
  it('case 29', () => {
    let x = Var()
    let y = Var()
    let r = Exp(Neg(x.pow(Const(2)).add(y.pow(Const(2)))))
    r.eval([x, y], [3, -2])
    assert.equal(r.value, 1 / Math.exp(13))
    assertFloatEqual(x.grad, -6 / Math.exp(13))
    assertFloatEqual(y.grad, 4 / Math.exp(13))
  })
  it('case 30', () => {
    let x = Var()
    let y = Ln(x)
    y.eval([x], [17])
    assert.equal(y.value, Math.log(17))
    assert.equal(x.grad, 1 / 17)
  })
  it('case 31', () => {
    let x = Var()
    let y = Ln(x.pow(Const(2)).sub(Const(3).mul(x)).add(Const(2)))
    y.eval([x], [5])
    assert.equal(y.value, Math.log(12))
    assertFloatEqual(x.grad, 7 / 12)
  })
  it('case 32', () => {
    let x = Var()
    let y = Sin(x)
    y.eval([x], [10])
    assert.equal(y.value, Math.sin(10))
    assertFloatEqual(x.grad, Math.cos(10))
  })
  it('case 33', () => {
    let x = Var()
    let y = Cos(x)
    y.eval([x], [20])
    assert.equal(y.value, Math.cos(20))
    assertFloatEqual(x.grad, -Math.sin(20))
  })
  it('case 34', () => {
    let x = Var()
    let y = Tan(x)
    y.eval([x], [5])
    assert.equal(y.value, Math.tan(5))
    assertFloatEqual(x.grad, 1 / (Math.cos(5) * Math.cos(5)))
  })
})

describe('special test', () => {
  it('case 1', () => {
    let x = Var()
    let y = x.mul(x)
    
    y.eval([x], [3])
    assert.equal(y.value, 9)
    assert.equal(x.grad, 6)

    y.eval([x], [4])
    assert.equal(y.value, 16)
    assert.equal(x.grad, 8)
  })
})
